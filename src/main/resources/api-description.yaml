openapi: 3.0.3
info:
  title: BlaBla - OpenAPI 3.0
  description: blabla api
  version: 1.0.11
servers:
  - url: http://localhost:8080
paths:
  /trip/{tripId}:
    get:
      operationId: getTripInfo
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripResponseDto'

    put:
      operationId: updateTrip
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTripRequestDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripResponseDto'
    delete:
      operationId: deleteTrip
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'

  /trip/create:
    post:
      operationId: createTrip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTripRequestDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripResponseDto'

  /location:
    get:
      operationId: findLocationLike
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            minimum: 3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'

  /login/request-auth/{phone}:
    post:
      operationId: sendLoginInfo
      parameters:
        - name: phone
          in: path
          required: true
          schema:
            pattern: ^(\+7|8|7)(\d{10})$
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'

  /login/confirm-auth/{phone}:
    post:
      operationId: confirmAuth
      parameters:
        - name: phone
          in: path
          required: true
          schema:
            pattern: ^(\+7|8|7)(\d{10})$
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmAuthRequest'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmAuthResponse'

  /user/info:
    put:
      operationId: updateUserInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    get:
      operationId: getUserInfo
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

  /user/notifications:
    put:
      operationId: updateUserNotificationsInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotificationsDto'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationsDto'
    get:
      operationId: getUserNotificationsInfo
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationsDto'

  /user/info/avatar:
    put:
      operationId: userSetAvatar
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Successful operation
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
    get:
      operationId: userGetAvatar
      responses:
        200:
          description: Successful operation
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
    delete:
      operationId: userDeleteAvatar
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'

  /user/phone:
    put:
      operationId: updatePhoneNumber
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'

components:
  schemas:

    InfoResponse:
      properties:
        time:
          type: string
        message:
          type: string

    UpdateTripRequestDto:
      required:
        - routes
        - seatsCount
      properties:
        seatsCount:
          type: integer
        comment:
          type: string
        routes:
          type: array
          items:
            $ref: '#/components/schemas/TripRouteDto'

    TripRouteDto:
      required:
        - id
        - city
        - dateTime
        - cost
      properties:
        id:
          type: string
          format: uuid
        city:
          type: string
          format: uuid
        datetime:
          type: string
          format: date-time
        comment:
          type: string
        cost:
          type: integer

    CreateTripRequestDto:
      properties:
        seatsCount:
          type: integer
        comment:
          type: string
        routes:
          type: array
          items:
            $ref: '#/components/schemas/CreateTripRouteRequestDto'

    TripResponseDto:
      properties:
        id:
          type: string
          format: uuid
        seatsCount:
          type: integer
        comment:
          type: string
        routes:
          type: array
          items:
            $ref: '#/components/schemas/TripRouteDto'

    CreateTripRouteRequestDto:
      required:
        - datetime
        - city
        - cost
      properties:
        city:
          type: string
          format: uuid
        datetime:
          type: string
          format: date-time
        comment:
          type: string
        cost:
          type: integer

    UserNotificationsDto:
      properties:
        email:
          type: string
          pattern: ^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$
        newMembers:
          type: boolean
        statusChanging:
          type: boolean

    UserDto:
      properties:
        username:
          type: string
          maxLength: 255
        birthday:
          type: string
          format: date
          pattern: (0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[1,2])-(19|20)\d{2}
        aboutMe:
          type: string
          maxLength: 1000

    LocationResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LocationItem'

    ConfirmAuthRequest:
      required:
        - confirmation_sequence
      type: object
      properties:
        confirmation_sequence:
          type: string

    LocationItem:
      properties:
        id:
          type: string
          format: uuid
        address:
          type: string

    ConfirmAuthResponse:
      properties:
        status:
          $ref: '#/components/schemas/AuthResponseStatus'
        descr:
          type: string
          description: Описание ответа

    DefaultResponse:
      properties:
        status:
          $ref: '#/components/schemas/DefaultResponseStatus'
        descr:
          type: string
          description: Описание ответа

    AuthResponseStatus:
      enum:
        - SUCCESS
        - NEW_USER
        - WRONG_CODE

    DefaultResponseStatus:
      enum:
        - SUCCESS
        - ERROR